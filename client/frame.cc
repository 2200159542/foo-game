#include<iostream>
#include<cstring>
#include<unistd.h>
#include<stdlib.h>
#include<time.h>
#include"frame.h"



const char table[23][33] = {
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
{32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,42,32,32,32,32,32,32,32,32,32,32,' '},
};


const char piece1[5][7]={
{42,42,32,32,32,42,42},
{32,32,42,32,42,32,32},
{32,32,32,42,32,32,32},
{32,32,42,32,42,32,32},
{42,42,32,32,32,42,42},
};

const char piece2[5][7]={
{32,32,42,42,42,32,32},
{32,42,32,32,32,42,32},
{42,32,32,32,32,32,42},
{32,42,32,32,32,42,32},
{32,32,42,42,42,32,32},
};

const char block[5][7]={
{32,32,32,32,32,32,32},
{32,32,32,32,32,32,32},
{32,32,32,32,32,32,32},
{32,32,32,32,32,32,32},
{32,32,32,32,32,32,32},
};



Chess::Chess(){
	
	strncpy((char*)this->tab, (const char*)table, 33*23);
	memset(this->exist,0,9);

}

int Chess::isWin(){

	if(exist[0]+exist[1]+exist[2]==3) return 1;
	if(exist[3]+exist[4]+exist[5]==3) return 1;
	if(exist[6]+exist[7]+exist[8]==3) return 1;
	if(exist[0]+exist[3]+exist[6]==3) return 1;
	if(exist[1]+exist[4]+exist[7]==3) return 1;
	if(exist[2]+exist[5]+exist[8]==3) return 1;
	if(exist[0]+exist[4]+exist[8]==3) return 1;
	if(exist[2]+exist[4]+exist[6]==3) return 1;
	
	if(exist[0]+exist[1]+exist[2]==30) return 2;
	if(exist[3]+exist[4]+exist[5]==30) return 2;
	if(exist[6]+exist[7]+exist[8]==30) return 2;
	if(exist[0]+exist[3]+exist[6]==30) return 2;
	if(exist[1]+exist[4]+exist[7]==30) return 2;
	if(exist[2]+exist[5]+exist[8]==30) return 2;
	if(exist[0]+exist[4]+exist[8]==30) return 2;
	if(exist[2]+exist[4]+exist[6]==30) return 2;
	
	return 0;

}

int Chess::check(int p, int q){
	
	if(p==0||q==0) return 0;
	if(this->exist[p-1]){
		if(q==3) return 1;
		else return 0;
		}
	
	if(q==3) return 0;
	
	return 1;
}

Chess::~Chess(){}

int Chess::play(int p, int q){

	if(!check(p,q)) return 0;
	
	if(q==3) this->exist[p-1] = 0;
	else this->exist[p-1] = (q-1)*10+2-q;
	
	int x,y;
	x=(p-1)%3;
	y=(p-1)/3;
	
	SIGN(x,y)
	
	int x0=x;
	for(int i=0;i<5;i++,y++){
		x=x0;
		for(int j=0;j<7;j++,x++)
			if(q==1)
				this->tab[y][x] = piece1[i][j];
			else if(q==2)
				this->tab[y][x] = piece2[i][j];
			else if(q==3)
				this->tab[y][x] = block[i][j];
	}
	
	return 1;
}

static const char* s1="%         ";
static const char* s2=" %        ";
static const char* s3="  %       ";
static const char* s4="   %      ";
static const char* s5="    %     ";
static const char* s6="     %    ";
static const char* s7="      %   ";
static const char* s8="       %  ";
static const char* s9="        % ";
static const char* s10="         %";

static void pen(int i){
		
	if(i==1) write(1,s1,10);
	if(i==2) write(1,s2,10);
	if(i==3) write(1,s3,10);
	if(i==4) write(1,s4,10);
	if(i==5) write(1,s5,10);
	if(i==6) write(1,s6,10);
	if(i==7) write(1,s7,10);
	if(i==8) write(1,s8,10);
	if(i==9) write(1,s9,10);
	if(i==10) write(1,s10,10);

}

void Chess::showTab(){
	

	srand(rand());
	
	
	write(1,"/////*****/////*****/////*****/////*****/////*****/////*****/////*****\n",71);
	
	char* p=(char*)this->tab;
	for(int i=0;i<23;i++,p+=33){
	
		write(1,"*",1);
		
		pen(rand()%10+1);
		
		write(1,"!       ",8);
		write(1,p,33);
		write(1,"      !",7);
		
		pen(rand()%10+1);
		
		write(1,"*\n",2);
	}	
	
	write(1,"/////*****/////*****/////*****/////*****/////*****/////*****/////*****\n",71);
	
}


int Chess::state(){

	if(isWin()==0) return 1;
	else return 0; 


}


void Chess::showState(int i){

	if(isWin()==i) std::cout<<"You are the winer!"<<std::endl<<"     GAME   END !!!" <<std::endl;
	else  std::cout<<"You are the loser!"<<std::endl<<"     GAME   END !!!" <<std::endl;
//	else std::cout<<"The Game Go On!"<<std::endl;
	
}





